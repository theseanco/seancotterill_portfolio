'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _config = require('../../config');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */
/* eslint no-console: off */

var ScreenClassRender = function (_React$Component) {
  _inherits(ScreenClassRender, _React$Component);

  function ScreenClassRender(props) {
    _classCallCheck(this, ScreenClassRender);

    var _this = _possibleConstructorReturn(this, (ScreenClassRender.__proto__ || Object.getPrototypeOf(ScreenClassRender)).call(this, props));

    _this.componentDidMount = function () {
      _this.setScreenClass();
      _this.eventListener = (0, _throttle2.default)(_this.setScreenClass, 100);
      window.addEventListener('resize', _this.eventListener);
    };

    _this.componentWillUnmount = function () {
      _this.eventListener.cancel();
      window.removeEventListener('resize', _this.eventListener);
    };

    _this.setScreenClass = function () {
      _this.setState({ screenClass: (0, _utils.getScreenClass)() });
    };

    _this.render = function () {
      return _react2.default.createElement(
        _react2.default.Fragment,
        null,
        _this.props.render(_this.state.screenClass)
      );
    };

    _this.state = {
      screenClass: (0, _config.getConfiguration)().defaultScreenClass
    };
    return _this;
  }

  return ScreenClassRender;
}(_react2.default.Component);

ScreenClassRender.propTypes = {
  /**
   * The function which return value will be rendered.
   * Will be called with one argument: the screen class.
   */
  render: _propTypes2.default.func.isRequired
};
exports.default = ScreenClassRender;